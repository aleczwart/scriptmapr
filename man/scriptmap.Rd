% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/scriptmap.R
\name{scriptmap}
\alias{scriptmap}
\title{Plot locations of object references in an r script.}
\usage{
scriptmap(file, tokenType = "SYMBOL", rgx = NULL, ...)
}
\arguments{
\item{file}{character: the path to the R script file to be
'mapped'.}

\item{tokenType}{Choice of \code{\link{getParseData}} token type
to plot. Default value "SYMBOL".}

\item{rgx}{character: a vector of regular expressions, to be used
to filter the set of symbols to be plotted.  Default is
\code{NULL}, implying no filtering.}

\item{...}{other arguments to be passed to \code{\link{grepl}}.}
}
\value{
A \code{ggplot} object.
}
\description{
Function \code{scriptmap} uses \code{\link{parse}} and
\code{\link{getParseData}} to identify symbols (i.e. names)
representing R objects in an R script and plots their locations
within the script.
}
\details{
Function \code{scriptmap} uses \code{\link{parse}} and
\code{\link{getParseData}} to identify symbols (i.e. names)
representing R objects in an R script and plots their locations
within the script.  The 'location' of a symbol is defined as the
line number (in the R script) of the \emph{beginning of the
statement containing the symbol} (and hence may not be the line
actually containing the symbol, in a multi-line statement).  This
limitation is a consequence of the information provided by
\code{getParseData}.

When analysing multiple reponses in a single script file, the
workflow invariably involves a lot of copy/paste/edit'ing of code,
and this leads to the possibility of errors/oversights in the
editing of code.  Function \code{scriptmap} provides a simple
overview of where object names appear in a script file, so that
names that appear out of place may be more easily noticed.  Note
that \code{scriptmap} is intended as an \emph{aid} to spotting
name-out-of-place coding errors, but should NOT be regarded as a
tool for definitively identifying all such errors!

A limitation of \code{scriptmap} is that it only works with object
names that are recognised by the parsing of the R script via
\code{\link{parse}}.  Character strings in a script are not parsed
for R object names by \code{\link{parse}}, so new or misspelled
object names that appear only in character strings will not be
plotted by \code{scriptmap}.  So do take extra care to check, for
example, character arguments to functions.
}
\author{
Alexander Zwart (alec.zwart at csiro.au)
}

